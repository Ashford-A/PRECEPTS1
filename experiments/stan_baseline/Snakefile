
import os

LOCALDIR = os.path.join(os.environ['CODEDIR'],
                        'HetMan', 'experiments', 'stan_baseline')

TMPDIR = os.path.join(os.environ['TEMPDIR'], 'HetMan', 'stan_baseline',
                      "{}__{}".format(config['cohort'], config['use_gene']),
                      config['model'])

OUTDIR = os.path.join(os.environ['DATADIR'], 'HetMan', 'stan_baseline',
                      "{}__{}".format(config['cohort'], config['use_gene']))


localrules: target, consolidate


rule target:
    input:
        expand("{outdir}/out-data__{model}.p",
               outdir=OUTDIR, model=config['model'])

    threads: 1


rule classify:
    output: "{TMPDIR}/output/out__cv-{cv_id}_task-{task_id}.p"

    threads: 12

    shell: """
        set +u; source activate HetMan; set -u;
        export OMP_NUM_THREADS=1;
        sleep $(( ({wildcards.cv_id} + 1) * ({wildcards.task_id} + 1) * $(shuf -i 1-9 -n 1) ));
 
        python {LOCALDIR}/fit_tests.py {config[use_gene]} {config[model]} \
                --use_dir={TMPDIR} --task_id={wildcards.task_id} \
                --cv_id={wildcards.cv_id}
        """


rule consolidate:
    input:
        expand("{tmpdir}/output/out__cv-{cv_id}_task-{task_id}.p",
               tmpdir=TMPDIR,
               cv_id=range(10), task_id=range(config['vars_count']))

    output:
        expand("{outdir}/out-data__{model}.p",
               outdir=OUTDIR, model=config['model'])

    threads: 1

    shell: """
        set +u; source activate HetMan; set -u;
        python {LOCALDIR}/merge_tests.py --use_dir={TMPDIR}

        cp {TMPDIR}/setup/cohort-data.p {OUTDIR}/cohort-data__{config[model]}.p
        cp {TMPDIR}/out-data.p {OUTDIR}/out-data__{config[model]}.p
        """

